# include <stdio.h>
# include <stdlib.h>
# include <math.h>
# include <string.h>
# include <time.h>

# include "iolist.h"

#define SIZE NCores
#define LARGENUMBER 999999999
//5000 10000
#define  NO_OF_PARTICLES 100
#define  MAX_ITERATION 100
#define ALPHA 0.1
#define BETA 0.1
#define  GAMMA 0.2
#define POWER_MAX 50
#define NEW_PARTICLE_SIZE BIT_LENGTH*SIZE + SIZE
//#define HARD_DIE_TEST 1
//#define TAM_WIDTH_MAX 15
//#define BIT_LENGTH 6	
//#define TSV_MAX 140

typedef struct swapsequence{
  int from;
  int to;
} swapseq;

typedef struct particlestructure{
  int info[NEW_PARTICLE_SIZE];
  int lbest[NEW_PARTICLE_SIZE];
  long int lbesttime;
  long int time_fitness;
} particle;

typedef struct {
        int corenum;
        int tam_width ;
        long int starttime ;
        long int endtime ;
        double power;
        int tsv;
} schedulerInfo ;

typedef struct 
{
	int power_list[POWER_MAX];
	long int testtime_list[POWER_MAX];
	int no_of_power;
} power_testtime_information;

typedef struct 
{
	int tam_list[TAM_WIDTH_MAX];
	long int testtime_list[TAM_WIDTH_MAX];
	power_testtime_information power_testtime_list[TAM_WIDTH_MAX];
	int no_of_tam;
} tam_testtime_information;

tam_testtime_information tam_testtime[SIZE];
schedulerInfo scheduler [ NO_OF_PARTICLES ] [ SIZE ];
particle partarray[NO_OF_PARTICLES];
particle globalbest;
schedulerInfo BestParticle [SIZE];

double power_budget;


int TAM_INFO[] = TAM;
int globalbestIndx;
//long int temptime=LARGENUMBER;

//Hard die config for p93791 as lowest die
int hard_tam_width[SIZE] = {15, 12, 12, 10, 7};
// long int hard_test_time[SIZE] = {1835731, 1267313, 556308, 605630, 94731};  //PSO 2D
long int hard_test_time[SIZE] = {1947063, 1384949, 651281, 669329, 96297};

FILE *p1;


void print_array(int length, int array[], char c)
{
    for ( int i = 0 ; i < length ; i ++ ) 
	{
		printf("%d ", array[i]);
	}
	printf("%c", c);
}
void init_array(int length, int array[])
{
    for ( int i = 0 ; i < length ; i ++ ) 
	{
		array[i] = 0;
	}
}
int bin_to_decimal(int binary)
{
	//int binary = 0;
	int decimal = 0;
	int remainder;
	int power = 1;
	
	while(binary!=0)
	{
        	remainder = binary % 10;
        	decimal = decimal + remainder * power;
        	power = power * 2;
        	binary=binary/10;
    	}	
	return decimal;
}

int tsv_required(int parallel_index[], int assigned_tam[], int layer_tsv[])
{	

	int total_tsv = 0;
	int lowest_die_test = 0;
	if(parallel_index[0])
	{
		lowest_die_test = 1;
		for(int i = 1; i < SIZE; i++)
		{
			if(parallel_index[i])
			{
				lowest_die_test = 0;
			}
		}
	}
	if(lowest_die_test)
	{
		return 0;
	}
	for(int i = 1; i < SIZE; i++)
	{
		int temp[SIZE]; 
		int count = 0;
		for(int jj = 0; jj < SIZE; jj ++)
		{
			temp[jj] = 0;
		}
		for(int j = i; j < SIZE; j++)
		{
			int parallel_tsv_count = 0;
			for(int k = j; k < SIZE; k++)
			{
				parallel_tsv_count = parallel_tsv_count +  assigned_tam[k] * parallel_index[k];
			}
			
			if(parallel_tsv_count >= assigned_tam[j])
				temp[count] = parallel_tsv_count;
			else
				temp[count] = assigned_tam [j];
			count++;
		}

		
		int max = 0;
		for(int ii = 0; ii < SIZE; ii++)
		{
			if(temp[ii] >= max)
			{
				max = temp[ii];
			}
		}
		layer_tsv[i-1] = max;
		//printf("Layer %d : %d ",i+1, max);

		total_tsv = total_tsv + max;
	}
	
	//printf("TSV used : %d\n", total_tsv);
	return total_tsv;
}

long int bin_packing(int *particle_info, int index, int genaration)
{
	int binary;
	long int testtime[SIZE];
	int assigned_tam[SIZE];
	int assigned_peak_power[SIZE];
	int assigned_tsv[SIZE];
	double area[SIZE];
	int schedule_index[SIZE];
	int no_of_core_scheduled = 0;
	int tam_index[SIZE];
	int power_index[SIZE];
	long int break_point[SIZE+2];
	int available_tam_width[SIZE+2];
	int insert_index;
	long int temp;
	double max_weightage;
	double min_weightage;
	int max_index;
	int layer_tsv[SIZE-1];
	int session_tsv[SIZE-1];
	int session = 1;
	int parallel_session_index[SIZE][SIZE];
	int parallel_temp_index[SIZE];
	double available_power_left[SIZE+2];
	// printf("************Begin schedule************\n");

	for(int  i = 0; i< SIZE; i++)
		scheduler [index][i].starttime = -1;
	
	/*for(int i = 0; i< SIZE; i++)
	{
		tam_index[i] = (int)(particle_info[i] * tam_testtime[i].no_of_tam);
	}*/
	for(int i = 0; i< SIZE; i++)
	{
		binary = 0;
		for(int k = 0; k < BIT_LENGTH ; k++)
			binary = binary + particle_info[(i* BIT_LENGTH) + k] * pow (10,BIT_LENGTH - 1 -k);
		tam_index[i] = bin_to_decimal(binary);
		power_index[i] = particle_info[i+BIT_LENGTH*SIZE];
	}		
	/*for(int i = 0; i< SIZE; i++)
		printf("%d\t",tam_index[i]);
	printf("\n\n\n");*/		
	if(HARD_DIE_TEST)
	{
		for(int i = 0; i< SIZE; i++)
		{
			assigned_tam[i] = hard_tam_width[i];
			testtime[i] = hard_test_time[i];
			area[i] = assigned_tam[i] * testtime[i];
		}
	}
	else
	{
		for(int i = 0; i< SIZE; i++)
		{
			assigned_tam[i] = tam_testtime[i].tam_list[tam_index[i]];
			assigned_peak_power[i] = tam_testtime[i].power_testtime_list[tam_index[i]].power_list[power_index[i]];
			testtime[i] = tam_testtime[i].power_testtime_list[tam_index[i]].testtime_list[power_index[i]];
			// testtime[i] = tam_testtime[i].testtime_list[tam_index[i]];
			// printf("%d %d %d %ld\n", assigned_tam[i], power_index[i], assigned_peak_power[i], testtime[i]);
			area[i] = assigned_tam[i] * testtime[i];
		}
	}
	// printf("\n i am here\n");
	for(int i = 0; i< SIZE; i++)
			schedule_index[i] = 0;
			
	for(int i = 0; i<= SIZE+1; i++)
		available_tam_width[i] = TAM_WIDTH_MAX;
	for(int i = 0; i<= SIZE+1; i++)
		available_power_left[i] = power_budget;		

	break_point[0] = 0;
	for(int i = 1; i<= SIZE+1; i++)
		break_point [i] = LARGENUMBER;

	for(int i = 0; i< SIZE; i++)
		session_tsv[i] = layer_tsv [i] = 0;

	int t =0;
	
	long int schedule_start_time = 0;
	while (no_of_core_scheduled < SIZE)
	{
		int flag = 1;
		
		while(flag ==1)
		{
			max_weightage = 0;
			min_weightage = LARGENUMBER;
			flag = 0;
			int jj = 0;
			schedule_start_time = break_point[jj];
			
			int current_layer_tsv[SIZE-1];
			if(session)
			{
				for(int i = 0; i< SIZE-1; i++)
					current_layer_tsv [i] = 0;
			}
			for (int kk = 0; kk< SIZE; kk++)
			{

				
				if(schedule_index[kk] == 0 )
				{
					
					if (available_tam_width[jj] >= assigned_tam[kk] && available_power_left[jj] >= assigned_peak_power[kk])
					{
						int parallel_index[SIZE];
						int finish_index[SIZE];
						for(int aa = 0; aa < SIZE; aa++)
						{
							parallel_index[aa] = 0;
							finish_index[aa] = 0;
						}
						
						for(int zz = 0; zz < SIZE; zz++)
						{
							// Find parallel cores
							if(schedule_index[zz] == 1)
							{
								for(int yy = 0; yy < t; yy++)
								{
									if(scheduler[index][yy].corenum == zz)
									{
										if(schedule_start_time >= scheduler [index][yy].starttime && schedule_start_time < scheduler [index][yy].endtime)
											parallel_index[zz] = 1;	

										if(schedule_start_time >= scheduler [index][yy].endtime)
											finish_index[zz] = 1;
										
											
									}
								}
								
							}
							
							
							

						}

						parallel_index[kk] = 1; 

						
						int tsv_count = tsv_required(parallel_index, assigned_tam, current_layer_tsv);
				
						int cost = area[kk];
						///cost = area[kk];
						// cost = break_point[jj]-testtime[kk];				
						int temp_layer_tsv[SIZE-1];
						for(int pp = 0; pp < SIZE-1; pp++)
						{
							temp_layer_tsv[pp] = 0;
						}
						//if(tsv_count <= TSV_MAX)
						//{
						int layer_check = 1;
						int sum = 0;
						for (int pp = 0; pp < SIZE-1; pp++)
						{
							if(current_layer_tsv[pp] < session_tsv[pp])
							{
								//layer_check = 0;
								temp_layer_tsv[pp] = session_tsv[pp];
							}
							else
							{
								temp_layer_tsv[pp] = current_layer_tsv[pp];
							}
							sum = sum + temp_layer_tsv[pp];
						}
						//printf("TSV used : %d\n", sum);
						if(sum <= TSV_MAX || tsv_count == 0)
						{
							//if(session == 1 || tsv_count == 0)
							//	layer_check = 1;
							//if(layer_check)
							
							flag = 1;
							if(cost > max_weightage)
							{							
								
								max_weightage = cost;

								max_index = kk;
								for (int pp = 0; pp < SIZE-1; pp++)
								{
									layer_tsv[pp] =  temp_layer_tsv[pp]; 
								}
								
							}
							
							
						//}
						}

						

						
					}
				}
			
				
			}
			
			if (flag == 0)
			{
				
				break;
			}
			
			
			scheduler [index][t].corenum =  max_index;
			scheduler [index][t].tam_width = assigned_tam[max_index];
			scheduler [index][t].starttime = break_point[jj];
			scheduler [index][t].endtime = break_point[jj] + testtime [max_index];	
			scheduler [index][t].power = assigned_peak_power[max_index];
			
			int number_of_brk = 0;
			while(break_point [number_of_brk] != LARGENUMBER)
				number_of_brk++;
			
		
			break_point[number_of_brk] = scheduler [index][t].endtime;
			for (int i = 0; i<=(SIZE); i++)
				for (int j = 0; j<=(SIZE-i); j++)
				{
					if(break_point[j]> break_point[j+1])
					{
						temp = break_point[j];
						break_point[j] = break_point[j+1];
						break_point[j+1] = temp;
					}
				}
			for (int i = 0; i<= SIZE+1; i++)
			{
				// if (break_point[i] >= scheduler[index][t].endtime  )
				if (break_point[i] == scheduler[index][t].endtime  )
				{
					insert_index = i;
					//break;
				}	
			}
			//inserting breakpoint
			//insert_index = number_of_brk;
			for (int i = number_of_brk; i>= insert_index; i--)
			{
				available_tam_width[i] = available_tam_width[i-1];	
				available_power_left[i] = available_power_left[i-1];	
			}
			int a = jj;
			while(break_point[a]< scheduler[index][t].endtime )
			{		
				available_tam_width[a] = available_tam_width[a] - assigned_tam[max_index];
				available_power_left[a] = available_power_left[a] - assigned_peak_power[max_index];
				a++;
			}	
			schedule_index[scheduler [index][t].corenum] = 1;
			no_of_core_scheduled++;	
			t++;
		}
		
		
		int latest_schedule_cores[SIZE];
		long int latest_schedule_core_testtime[SIZE];
		int latest_schedule_core_tam[SIZE];	
		int k = 0;
		int no_of_latest_scheduled_core = 0;
		int temp1;
		long int temp2;
		for(int i = 0; i< SIZE; i++)
		{
			//if(schedule_index[scheduler [index][i].corenum] == 1)
			if (scheduler [index][i].starttime == break_point[0] )
			{
				latest_schedule_cores[k] = scheduler [index][i].corenum;
				latest_schedule_core_testtime[k] = scheduler [index][i].endtime;
				latest_schedule_core_tam[k] = scheduler [index][i].tam_width;
				k++;
				no_of_latest_scheduled_core++;	
			}		
		}
		for(int i = 0; i< no_of_latest_scheduled_core-1; i++)
		{
			for(int j = 0 ; j< no_of_latest_scheduled_core-i-1; j++)
			{
				if(latest_schedule_core_testtime[j] <latest_schedule_core_testtime[j+1])
				{
					temp1 = latest_schedule_cores[j];
					temp2 = latest_schedule_core_testtime[j];
					latest_schedule_cores[j] = latest_schedule_cores[j+1];
					latest_schedule_core_testtime[j] = latest_schedule_core_testtime[j+1];
					latest_schedule_cores[j+1] = temp1;
					latest_schedule_core_testtime[j+1] = temp2;
				}
			}
		}
	//if(genaration == MAX_ITERATION -1)
	//{
		int core_check = 0;
		if(available_tam_width[0] > 0)
		{	
			
		}
		
	//}	

		for (int i =0; i< SIZE+1; i++)
		{
			break_point[i] = break_point[i+1];
			available_tam_width[i] = available_tam_width[i+1];
			available_power_left[i] = available_power_left[i+1];
		}
		session++;
		//printf("\n\n ********************New session - %d breakpoint -  %ld ************************* \n\n", session, break_point[0]);
		for(int i = 0; i < SIZE-1; i++)
		{		
			session_tsv[i] = layer_tsv[i];
			//printf("%d ", session_tsv[i]);
			for(int kk = 0; kk<SIZE; kk++)
			{
				if(scheduler [index][kk].corenum == 0)
					scheduler [index][kk].tsv = 0;
				else if(scheduler [index][kk].corenum-1 == i)
				{
					scheduler [index][kk].tsv = layer_tsv[i];
				}
			}
		}
		//printf("\n");
		break_point[SIZE+1] = LARGENUMBER;
		available_tam_width[SIZE+1] = TAM_WIDTH_MAX;	
		available_power_left[SIZE+1] = power_budget;	
	}
	
	schedulerInfo tmp;
        for ( int i = 0 ; i < SIZE ; i ++ )
        {
                for ( int j = 0 ; j < SIZE-1-i ; j ++ ) 
                {
                        if ( scheduler [index][j+1].starttime <  scheduler [index][j].starttime ) 
                        {
                                tmp.corenum = scheduler [index][j+1]. corenum ;
                                tmp.tam_width = scheduler [index][j+1]. tam_width ;
                                tmp.starttime = scheduler [index][j+1]. starttime;
                                tmp.endtime = scheduler [index][j+1]. endtime;
                                tmp.tsv = scheduler [index][j+1]. tsv;
                                tmp.power = scheduler [index][j+1]. power;
                                
                                scheduler [index][j+1]. corenum = scheduler [index][j]. corenum ;
                                scheduler [index][j+1]. tam_width = scheduler [index][j]. tam_width ;
                                scheduler [index][j+1]. starttime = scheduler [index][j]. starttime ;
                                scheduler [index][j+1]. endtime = scheduler [index][j]. endtime ;
                                scheduler [index][j+1]. tsv = scheduler [index][j]. tsv ;
								scheduler [index][j+1]. power = scheduler [index][j]. power;	


                                scheduler [index][j]. corenum = tmp.corenum ;
                                scheduler [index][j]. tam_width = tmp.tam_width ;
                                scheduler [index][j]. starttime = tmp.starttime ;
                                scheduler [index][j]. endtime = tmp.endtime ;
                                scheduler [index][j]. tsv = tmp.tsv;
                                scheduler [index][j]. power =  tmp.power;
                                
                        }
                }
        }
	

	int flag = 0;
	int kk;
	for ( kk = 0; kk<= SIZE+1; kk++)
		if(break_point[kk] == LARGENUMBER)
		{	
			flag = 1;
			break;
		}
	if (flag ==1)
	{
	
	if (break_point[kk-1] == 64)
	{	
		printf("\n********%ld\n",break_point[kk-1]);
		for(int i = 0; i<= SIZE+1; i++)
					printf("%ld\t", break_point[i]);
				printf("\n\n");
				for(int i = 0; i<= SIZE+1; i++)
					printf("%d\t", available_tam_width[i]);
				printf("\n\n");
	exit(0);
	}
	return(break_point[kk-1] );
	
	}
	else
	{
	
	if (break_point[kk] == 64)
	{	
		printf("\n++++++%ld\n",break_point[kk]);
		for(int i = 0; i<= SIZE+1; i++)
					printf("%ld\t", break_point[i]);
				printf("\n\n");
				for(int i = 0; i<= SIZE+1; i++)
					printf("%d\t", available_tam_width[i]);
				printf("\n\n");
	exit(0);
	}
	
	return (break_point[kk]);
	
	}
	
				
}				




void swapparticleinfo(int *a, int *b, double prob)
{
	int binary;
	int decimal, power_decimal;
	int flag = 1;
	while(flag)
	{
		int tsv_count = 0;
		int temp[SIZE]; 
		for(int jj = 0; jj < SIZE; jj ++)
		{
			temp[jj] = 0;
		}
		for(int i = 0;i < (SIZE);)
		{
			//if(drand48() <= prob)
			for(int j = (i* BIT_LENGTH); j < ((i* BIT_LENGTH) + BIT_LENGTH); j++)	
				if(drand48() <= prob)
					a[j] = b[j];
			binary = 0;	
			for(int k = 0; k < BIT_LENGTH ; k++)
				binary = binary + a[(i* BIT_LENGTH) + k] * pow (10,BIT_LENGTH - 1 -k);
			decimal	= bin_to_decimal(binary);

		

			if(drand48() <= prob)
			{
				a[i+BIT_LENGTH*SIZE] = b[i+BIT_LENGTH*SIZE];
			}

			if(decimal< tam_testtime[i]. no_of_tam && a[i+BIT_LENGTH*SIZE] < tam_testtime[i].power_testtime_list[decimal].no_of_power)
			{
				if(tam_testtime[i].power_testtime_list[decimal].power_list[a[i+BIT_LENGTH*SIZE]] < power_budget)
				{
					temp[i] = tam_testtime[i].tam_list[decimal];
					i++;
				}
			}	
		}
		for(int i = 1; i < SIZE; i++)
		{			
			int max = 0;
			for(int ii = i; ii < SIZE; ii++)
			{
				if(temp[ii] >= max)
				{
					max = temp[ii];
				}
			}
			
			tsv_count = tsv_count + max;
		}
		if(tsv_count <= TSV_MAX)
		{
			flag = 0;
	
		}
	} // end of while flag
}

void initialiseparticle(particle *object)
{
	int binary;
	int decimal, power_decimal;
	object->lbesttime = LARGENUMBER;
	
	int flag = 1;
	while(flag)
	{
		int tsv_count = 0;
		int temp[SIZE]; 
		for(int jj = 0; jj < SIZE; jj ++)
		{
			temp[jj] = 0;
		}
		for(int i = 0;i < (SIZE);)
		{
			
			for(int j = (i* BIT_LENGTH); j < ((i* BIT_LENGTH) + BIT_LENGTH); j++)	
				object->info[j]=rand()% 2;
			binary = 0;	
			for(int k = 0; k < BIT_LENGTH ; k++)
				binary = binary + object->info[(i* BIT_LENGTH) + k] * pow (10,BIT_LENGTH - 1 -k);
			decimal	= bin_to_decimal(binary);
			if(decimal< tam_testtime[i]. no_of_tam )
			{
				
				int max_power_index =  tam_testtime[i].power_testtime_list[decimal].no_of_power;
				int assigned_power_index	= rand() % max_power_index;
				if(tam_testtime[i].power_testtime_list[decimal].power_list[assigned_power_index] < power_budget)
				{
					object->info[(i + (BIT_LENGTH*SIZE))] = assigned_power_index;
					temp[i] = tam_testtime[i].tam_list[decimal];
					i++;
				}
			}
		}

		for(int i = 1; i < SIZE; i++)
		{			
			int max = 0;
			for(int ii = i; ii < SIZE; ii++)
			{
				if(temp[ii] >= max)
				{
					max = temp[ii];
				}
			}
			
			tsv_count = tsv_count + max;
		}
		if(tsv_count <= TSV_MAX)
		{
			flag = 0;
			
		}
	}	

}

int particle_swarm_optimization()
{
	
	time_t seconds;
	time( & seconds ) ;
	long int gencount=0;
	int temp=0;
	long int temptime=LARGENUMBER;
	long int lasttesttime = LARGENUMBER;
	int samegencount=0;
	
	for (int i=0;i<( NO_OF_PARTICLES  ); ){
    		initialiseparticle(&(partarray[i]));
    		/*for(int kkk = 0; kkk< NEW_PARTICLE_SIZE; kkk++)
        		printf("%d\t",partarray[i].info[kkk]);
        	printf("\n\n");*/


		for ( int l = 0 ; l < i ; l ++ ) {
			int flag = 0 ;
			for ( int t = 0 ; t < NEW_PARTICLE_SIZE && flag == 0; t ++ ) {
				if ( partarray [ l ] . info [ t ] != partarray [ i ] . info [ t ] ) {
					flag = 1 ;
					
				}
			}
			if ( flag == 0 ) break ;
			if ( l == i - 1 ) {
				i ++ ;
				break ;
			}
		}
		if ( i == 0 ) i ++;
		
	}
	
	/*for (int i=0;i<NO_OF_PARTICLES;i++)
	for(int kkk = 0; kkk< SIZE; kkk++)
        	printf("%d\t",partarray[i].info[kkk]);
        printf("\n\n");*/
	int generation = 0;
	// printf("here\n");
	for (int i=0;i<NO_OF_PARTICLES;i++)
    	{
    		partarray[i].time_fitness = bin_packing(partarray[i].info,i,generation);  //testtime returns maxtime for scheduling process
    		for (int ii=0;ii< NEW_PARTICLE_SIZE;ii++)
        	{
        	        partarray[i].lbest[ii]=partarray[i].info[ii];
       	 	}
    		partarray[i].lbesttime=partarray[i].time_fitness;
    	}
    	
    	int flag = 0;
    	for (int i=0;i<NO_OF_PARTICLES;i++)
    	{
      	 	if(partarray[i].time_fitness<temptime)
         	{
                	//Make it the globalbest
                	temp=i;
                	globalbestIndx = i;
                	temptime=partarray[i].time_fitness;
                	flag = 1;
            }
    	}
    	//printf("global best********%d\n",globalbestIndx);
   	 if(flag == 1)
   	 {
    		globalbest.time_fitness=temptime;
    		// Copy info of the best particle to the global best particle
    		for (int i=0;i< NEW_PARTICLE_SIZE;i++)
    			globalbest.info[i]=partarray[globalbestIndx].info[i];
    		for ( int pp = 0 ; pp < SIZE ; pp ++ )
        	{
       				BestParticle [ pp ] .corenum = scheduler [globalbestIndx][pp]. corenum;
          			BestParticle [ pp ] .tam_width = scheduler [globalbestIndx][pp]. tam_width;
               		BestParticle [ pp ] .starttime = scheduler [globalbestIndx][pp]. starttime;
                	BestParticle [ pp ] .endtime = scheduler [globalbestIndx][pp]. endtime;
                	BestParticle [ pp ] .tsv = scheduler [globalbestIndx][pp]. tsv;
                	BestParticle [ pp ] .power = scheduler [globalbestIndx][pp]. power;
                	//printf ("{ %d, %d, %d, %d }\n", scheduler [globalbestIndx][pp]. io, scheduler [globalbestIndx][pp]. corenum, scheduler [globalbestIndx][pp]. starttime, scheduler [globalbestIndx][pp]. endtime);
        	}
    	}
    	int count;
    	while(gencount<MAX_ITERATION)
    	{
        	
        	for(int i=0;i<NO_OF_PARTICLES;i++)
        	{
            	   	 /*for(int kkk = 0; kkk< SIZE; kkk++)
            	   	 	printf("%lf\t",partarray[i].info[kkk]);
            	   	 printf("\n\n");*/
            	   	 //swaptamindex(partarray[i].info,partarray[i].lbest,globalbest.info, ALPHA,BETA); //paticle's IOpair part is updated to pbest  with prob APLHA	
            		swapparticleinfo(partarray[i].info,partarray[i].lbest,ALPHA);
            		swapparticleinfo(partarray[i].info,globalbest.info,BETA);
            		/*for(int kkk = 0; kkk< SIZE; kkk++)
            	   	 	printf("%lf\t",partarray[i].info[kkk]);
            	   	 printf("\n\n");*/
            		//swapiopair(partarray[i].info,globalbest.info, BETA);     //paticle's IOpair part is updated to gbest  with prob BETA
    			
	    			partarray[i].time_fitness = bin_packing(partarray[i].info,i,gencount);
	    			if((partarray[i].time_fitness)<=(partarray[i].lbesttime))
	            		{    
	                		for (int ii=0;ii< NEW_PARTICLE_SIZE;ii++)
	                		{
	                			partarray[i].lbest[ii]=partarray[i].info[ii];
	                		}
	                		partarray[i].lbesttime=partarray[i].time_fitness;
	            		}
            }
               	int flag = 0;
        	for (int i=0;i<NO_OF_PARTICLES;i++)
        	{
           		 if(partarray[i].time_fitness<temptime) //temptime is holding globalbest time for a generation.
               		 {
                    		//Make it the globalbest
                   			temp=i;
                    		globalbestIndx = i;
                    		temptime=partarray[i].time_fitness;
                    		flag = 1;
                    
                	}
        	}
        	//printf("global best********%d\n",globalbestIndx);
        	if (flag == 1)
   		{
      			globalbest.time_fitness=temptime;
        		for (int i=0;i< NEW_PARTICLE_SIZE;i++)
        			globalbest.info[i]=partarray[globalbestIndx].info[i];
       			for ( int pp = 0 ; pp < SIZE ; pp ++ )
       			{
						BestParticle [ pp ] .corenum = scheduler [globalbestIndx][pp]. corenum;
               		 	BestParticle [ pp ] .tam_width = scheduler [globalbestIndx][pp]. tam_width;
                		BestParticle [ pp ] .starttime = scheduler [globalbestIndx][pp]. starttime;
                		BestParticle [ pp ] .endtime = scheduler [globalbestIndx][pp]. endtime;
                		BestParticle [ pp ] .tsv = scheduler [globalbestIndx][pp]. tsv;
                		BestParticle [ pp ] .power = scheduler [globalbestIndx][pp]. power;
                		//printf ("{ %d, %d, %d, %d }\n", scheduler [globalbestIndx][pp]. io, scheduler [globalbestIndx][pp]. corenum, scheduler [globalbestIndx][pp]. starttime, scheduler [globalbestIndx][pp]. endtime);
                }
   		}	
   		
   		gencount++;
        if (temptime == lasttesttime)
   		{
   			samegencount++;
   			// printf("\nlasttime is %ld for gen %ld",lasttesttime, gencount);
   			// printf("\n\n the semgencount value is %d", samegencount);
   		}
   		else
   		{	
   			samegencount = 0;
   			lasttesttime= temptime;
   		}	
   		if (samegencount == 1500)
   			break;	
   	}
   	// printf("\ngencount is %ld\n", gencount);

    	return temptime;		
}




void print_csv(long int mint, schedulerInfo BestParticle [])
{
	/*Print Parallelism, TAM width and TSV layer in CSV*/
	printf("%d;%ld;",TAM_WIDTH_MAX,mint);
    int prev = 0;
    for ( int i = 0 ; i < SIZE ; i ++ ) {
    	if(i == 0)
    		printf ("%d", BestParticle[i].corenum+1);
    	else if(BestParticle[i]. starttime == prev)
            printf ("|%d", BestParticle[i].corenum+1);
        else
            printf (",%d", BestParticle[i].corenum+1);
        prev = BestParticle[i].starttime;
    }
	printf(";");
    for ( int i = 0 ; i < SIZE ; i ++ ) {
    	for ( int j = 0 ; j < SIZE ; j ++ ) {
    		if(BestParticle[j].corenum == i)
    		{
    			printf("%d",BestParticle[j].tam_width);
    			if(i != SIZE-1)
					printf(",");
			}        			
    	}
    }
	printf(";");
	for ( int i = 0 ; i < SIZE ; i ++ ) {
    	for ( int j = 0 ; j < SIZE ; j ++ ) {
    		if(BestParticle[j].corenum == i)
    		{
    			printf("%d",BestParticle[j].tsv);
        		if(i != SIZE-1)
					printf(",");
    		}
    	}
    }
	printf(";");
	for ( int i = 0 ; i < SIZE ; i ++ ) {
    	for ( int j = 0 ; j < SIZE ; j ++ ) {
    		if(BestParticle[j].corenum == i)
    		{
    			printf("%d",(int) BestParticle[j].power);
        		if(i != SIZE-1)
					printf(",");
    		}
    	}
    }
	printf(";\n");
}




int main(int argc, char *argv [ ])
{
	long int ppp=1111990911;
	
	
	time_t seconds;
	time( & seconds ) ;
	srand ( seconds ) ;
	srand48 ( seconds ) ; //srand generates a sequence of random numbers depending upon the seed value

	p1 = fopen ( argv [ 1 ],"w" ) ;
	int NoIteration = atoi ( argv [ 2 ] ) ;
	power_budget = atoi ( argv [ 3 ] ) ;
        //TAM_WIDTH_MAX = atoi ( argv [ 3 ] ) ;
        int iteration;

	long int t,mint;
	
	FILE *tamread;
	tamread = fopen("tam_testtime.txt","r");
	for(int ii = 0; ii< SIZE; ii++)
		tam_testtime[ii].no_of_tam =  TAM_INFO[ii];
	for(int ii = 0; ii< SIZE; ii++)
	{
		for(int jj = 0; jj< tam_testtime[ii].no_of_tam; jj++)
		{
			fscanf(tamread,"%d\t%ld", &tam_testtime[ii].tam_list[jj], &tam_testtime[ii].testtime_list[jj]); 
		}
	}
	fclose (tamread);
	for(int ii = 0; ii< SIZE; ii++)
	{
		
		for(int jj = 0; jj< tam_testtime[ii].no_of_tam; jj++)
		{
			char input_file [100]="sic_power_level_";
			char r[20];
			sprintf (r, "%d",ii+1);
			strcat (input_file, r);
			long int power, testtime;
			sprintf (r, "/power_tam_%d",jj+5);
			strcat (input_file, r);
			strcat (input_file, ".txt");
			// printf("%s\n", input_file);

			tamread = fopen(input_file,"r");
			int count = 0;
			while (!(feof(tamread))) 
			{
			    fscanf(tamread, "%ld\t%ld\t\n", &power, &testtime);
				// printf("%ld %ld\n", power, testtime);
				tam_testtime[ii].power_testtime_list[jj].power_list[count] = power;
				tam_testtime[ii].power_testtime_list[jj].testtime_list[count] = testtime;

				count ++;
			}
			tam_testtime[ii].power_testtime_list[jj].no_of_power = count;
		}
		
		
	}
	// temp_tam_index[0] = TAM_INFO[0];
	/*for(int ii = 0; ii< SIZE; ii++)
	{
		for(int jj = 0; jj< tam_testtime[ii].no_of_tam; jj++)
			printf("%d ", tam_testtime[ii].power_testtime_list[jj].no_of_power);
		printf("\n");
	}*/
	

	if(HARD_DIE_TEST)
	{
		initialiseparticle(&(partarray[0]));
		partarray[0].time_fitness = bin_packing(partarray[0].info,0,0);
		// printf("%ld \n", partarray[0].time_fitness);
		for ( int i = 0 ; i < SIZE ; i ++ ) {
		        //printf ("{ %d, %d, %ld, %ld, %d }\n", scheduler[0][i].corenum, scheduler[0][i].tam_width, scheduler[0][i]. starttime, scheduler[0][i]. endtime,  scheduler[0][i]. tsv);
		}
		print_csv(partarray[0].time_fitness, scheduler[0]);
		return 0;
	}
	
	for(iteration=0;iteration < NoIteration;iteration++)
	{
		globalbestIndx  = 0;
		
		mint=particle_swarm_optimization();
		// printf ("Globalbestindx: %d\n",globalbestIndx);
		/*fo/r ( int pp = 0 ; pp < SIZE ; pp ++ ){
                 	       BestParticle [ pp ] .tam_width = scheduler [globalbestIndx][pp]. tam_width;
                        BestParticle [ pp ] .corenum = scheduler [globalbestIndx][pp]. corenum;
                        BestParticle [ pp ] .starttime = scheduler [globalbestIndx][pp]. starttime;
                        BestParticle [ pp ] .endtime = scheduler [globalbestIndx][pp]. endtime;
                }*/
		for(int i=1;i<2;i++)
		{
    			   // printf("RunForrestRun: %d\n",i);
    				globalbestIndx = 0;
    			
    			t=particle_swarm_optimization();
    			/*for ( int ii = 0 ; ii < SIZE ; ii ++ ) {
                printf ("{ %d, %d, %ld, %ld }\n", scheduler [globalbestIndx][ii].corenum, scheduler [globalbestIndx][ii].tam_width, scheduler [globalbestIndx][ii]. starttime, scheduler [globalbestIndx][ii]. endtime);
        }*/

			if ( t < mint ) {
				mint = t ;
				/*for ( int pp = 0 ; pp < SIZE ; pp ++ ){
                                        BestParticle [ pp ] .corenum = scheduler [globalbestIndx][pp]. corenum;
                                        BestParticle [ pp ] .tam_width = scheduler [globalbestIndx][pp]. tam_width;
                                        BestParticle [ pp ] .starttime = scheduler [globalbestIndx][pp]. starttime;
                                        BestParticle [ pp ] .endtime = scheduler [globalbestIndx][pp]. endtime;
                                }*/
			}
			
			//printf("%ld \n",t);
		}
	
		//fprintf(p1,"%ld\n",mint);
		 // printf("%ld\n",mint);
		
	}
        for ( int i = 0 ; i < SIZE ; i ++ ) {
                // printf ("{ %d, %d, %ld, %ld, %d }\n", BestParticle[i].corenum, BestParticle[i].tam_width, BestParticle[i]. starttime, BestParticle[i]. endtime,  BestParticle[i]. tsv);
        }

    print_csv(mint, BestParticle);
	

    return 0;
}

